/**
 * Leetcode 621. 任务调度器
 * 给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。
 * 任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。
 * 在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。
 * 
 * 然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，
 * 因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。
 * 
 * 你需要计算完成所有任务所需要的 最短时间 。
 * 
 * 示例 1：
 *  输入：tasks = ["A","A","A","B","B","B"], n = 2
 *  输出：8
 *  解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
 *  在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，
 *  而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 
 *  
 * 示例 2：
 *  输入：tasks = ["A","A","A","B","B","B"], n = 0
 *  输出：6
 *  解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0
 *  ["A","A","A","B","B","B"]
 *  ["A","B","A","B","A","B"]
 *  ["B","B","B","A","A","A"]
 *  ...
 *  诸如此类
 * 
 * 示例 3：
 *  输入：tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
 *  输出：16
 *  解释：一种可能的解决方案是：
 *  A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A
 * 
 * 提示：
 *  (1)1 <= task.length <= 104
 *  (2)tasks[i] 是大写英文字母
 *  (3)n 的取值范围为 [0, 100]
 */
#include <vector>
using namespace std;

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        auto v = vector<int>(26, 0);
        /* 统计各个任务出现的次数 */
        for (char c : tasks)
            v[c - 'A']++;
        int maxVal = -1; /* 出现次数最大值 */
        int cnt = 0; /* 出现次数等于最大值的任务数量 */
        for (int i = 0; i < 26; i++) {
            if (v[i] > maxVal) {
                maxVal = v[i];
                cnt = 1;
            } else {
                cnt += v[i] == maxVal;
            }
        }
        /**
         * 首先考虑最简单的情况, 任务的种数小于等于冷却时间:
         *   例如[A,A,A,B,B,C,C], n = 3
         *   A任务次数最多, 那么我们知道A的执行顺序应该类似于:
         *   A -> [3个CPU时间] -> A -> [3个CPU时间] -> A -> ...
         *
         *   那么至少需要的时间为:
         *    (A出现的次数 - 1) * (冷却时间 + 1)
         *
         *   在两轮A执行的相隔时间里, 我们可以"填入"其他任务
         *   那么最后一次执行完A之后, 是否还有任务需要执行,
         *   就取决于是否有跟A出现次数相同的任务
         *
         *   譬如: [A,A,A,B,B,B,C,C]
         *   最后一次执行A时, C已经全部执行完毕, B出现次数跟A一样, 因此还需要执行B
         *   又譬如: [A,A,A,B,B,B,C,C,C]
         *   最后一次执行A时, B和C出现次数跟A一样, 因此还需要执行B和C
         *
         *   综上, 当任务的种数小于等于冷却时间时,
         *   设所有任务中出现次数最多的任务集合为{x0, x1, ..., xn}
         *   它们出现的次数为max, 集合元素个数为cnt, 最少需要的执行时间为:
         *   (n + 1) * (max - 1) + cnt
         *    (1) n + 1   ----> 两个xi任务之间的冷却时间
         *    (2) cnt     ----> 最后一轮执行时, 还剩多少个任务
         *    (3) max - 1 ----> 除去最后一轮, 需要执行多少次xi任务
         *
         * 接着, 我们来考虑, 任务的种数大于等却时间的情况:
         *   譬如: [A,A,A,B,B,C,C,D,D], n = 3
         *   我们假设优先执行A, B, C三个任务, 我们有执行顺序:
         *     ABC -> ABC -> A
         *   现在还有个任务D, 我们不妨把它"插入"到每一轮执行中, 有:
         *     ABCD -> ABCD -> A
         *   只要出现次数最多的任务(上面的例子是A)的执行顺序满足冷却时间
         *   那么在每一轮中我们插入多少个其他任务, 都是满足冷却时间的
         *
         *   此时, 我们有多少个任务, 就需要执行多久时间
         */
         /* 实在不懂参考这个连接:
          * https://leetcode-cn.com/problems/task-scheduler/solution/tong-zi-by-popopop/ */
        return max((int)tasks.size(), (n + 1) * (maxVal - 1) + cnt);
    }
};