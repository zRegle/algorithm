/**
 * Leetcode 877. 石子游戏
 * 亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 piles[i] 。
 * 游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。
 * 亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
 * 假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 true ，当李赢得比赛时返回 false 。
 *  
 * 示例：
 *  输入：[5,3,4,5]
 *  输出：true
 *  解释：
 *   亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。
 *   假设他取了前 5 颗，这一行就变成了 [3,4,5] 。
 *   如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。
 *   如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。
 *   这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
 *  
 * 提示：
 *  (1)2 <= piles.length <= 500
 *  (2)piles.length 是偶数。
 *  (3)1 <= piles[i] <= 500
 *  (4)sum(piles) 是奇数。
 */
#include <vector>
using std::vector;

/* dfs方法参考dfs文件夹
 * dp方法参考dp文件夹 */

/**
 * 先手必胜
 * 数组长度是偶数, 有两种情况:
 *  (1)先手取第一个, 剩下的是2 ~ n, 后手能取的位置是2或者n, 都是偶数位置
 *     后手选取后, 长度变为n - 2, 产生递归
 *  (2)先手取最后一个, 剩下的位置是1 ~ (n-1), 后手能取的位置是1或者n-1, 都是奇数位置
 *     后手取后, 长度变为n - 2, 产生递归
 * 可以看到, 先手取的位置必定限制了后手能取的位置, 
 * 即: 先手取首位后手只能取偶数位, 先手取末位后手只能取奇数位.
 * 
 * 因为数组长度是偶数, 我们可以按位置的奇偶分成两堆
 * 又因为石头总数是奇数, 那么这两堆石子总数一定不相等
 * 先手只要每次一直取石子总数多的奇数堆或者偶数堆就能获胜
 */
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        return true;      
    }
};