/* Leetcode 258.各位相加
 * 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。
 * 示例:
 *  输入: 38
 *  输出: 2
 *  解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
 * 进阶: 你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？
 *
 */
class Solution {
public:
    int addDigits(int num) {
         /*  假设num = 100a + 10b + c
         *  那么它可以写成: 99a + 9b + (a + b + c)
         *  a + b + c就是下次我们需要迭代的数字
         * 1.假设a + b + c小于10, 我们要如何在O(1)的时间里得到函数最终的返回值?
         *  很简单, num % 9即可
         * 2.如果a + b + c大于10, 怎么办?
         *  看似需要对a + b + c进行下一步迭代, 实则不然
         *  因为num = 99a + 9b + (a + b + c), 所以num % 9 = (a + b + c) % 9
         *  更进一步地来讲, 设数字为x, 记将它的各位数相加的操作为f(x), 有:
         *  f(f(x)) % 9 = f(x) % 9 = x % 9
         *  因此num % 9就是我们最终需要的结果
         * 3.特殊情况下, 如果num是9的倍数, 我们希望返回9而不是0
         *
         * (num - 1) % 9 + 1可以处理各种情况
         */
        return (num - 1) % 9 + 1;
    }
};